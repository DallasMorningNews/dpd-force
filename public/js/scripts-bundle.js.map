{"version":3,"sources":["+custom.js"],"names":["$","document","ready","processData","data","forceData","GeoJSON","parse","Point","exclude","drawMap","console","log","map","addSource","type","addLayer","id","source","layout","visibility","paint","circle-radius","stops","circle-color","on","e","features","queryRenderedFeatures","point","layers","length","feature","properties","content","each","k","v","totalIncidents","force_use","i","current_badge_no","mapboxgl","Popup","setLngLat","geometry","coordinates","setHTML","addTo","click","badge","this","attr","filterBadge","flyTo","center","zoom","Math","max","getZoom","getCanvas","style","cursor","clearMap","officerData","rawData","totalOfficers","push","off","removeLayer","removeSource","d","Date","year","getFullYear","text","Map","container","scrollZoom","disable","addControl","Navigation","getJSON"],"mappings":"AAAAA,EAAAC,UAAAC,MAAA,WA0CA,QAAAC,GAAAC,GACAC,EAAAC,QAAAC,MAAAH,GAAAI,OAAA,WAAA,aAAAC,aACAC,EAAAL,GACAM,QAAAC,IAAAP,GAKA,QAAAK,GAAAN,GAEAS,EAAAC,UAAA,gBACAC,KAAA,UACAX,KAAAA,IAIAS,EAAAG,UACAC,GAAA,iBACAC,OAAA,eACAH,KAAA,SACAI,QACAC,WAAA,WAEAC,OACAC,iBACAC,QAAA,EAAA,IAAA,GAAA,IAAA,GAAA,KAEAC,eAAA,aAKAX,EAAAY,GAAA,QAAA,SAAAC,GACA,GAAAC,GAAAd,EAAAe,sBAAAF,EAAAG,OAAAC,QAAA,mBAEA,IAAAH,EAAAI,OAAA,CAIA,GAAAC,GAAAL,EAAA,GAGAV,EAAAe,EAAAC,WAAAhB,GAGAiB,EAAA,EAGAlC,GAAAmC,KAAA/B,EAAAuB,SAAA,SAAAS,EAAAC,GACA,GAAAA,EAAAJ,WAAAhB,KAAAA,EAAA,CAKA,GAAAqB,GAAAD,EAAAJ,WAAAM,UAAAR,MAKA,KAAAS,EAAA,EAAAA,EAAAF,EAAAE,IACAN,GAAA,mCAAAG,EAAAJ,WAAAM,UAAAC,GAAAC,iBAAA,KAAAJ,EAAAJ,WAAAM,UAAAC,GAAAC,iBAAA,cAMA,GAAAC,UAAAC,OACAC,UAAAZ,EAAAa,SAAAC,aACAC,QAAAb,GACAc,MAAAnC,EAIAb,GAAA,UAAAiD,MAAA,WACA,GAAAC,GAAAlD,EAAAmD,MAAAC,KAAA,aACAC,GAAAH,KAIArC,EAAAyC,OACAC,OAAAvB,EAAAa,SAAAC,YACAU,KAAAC,KAAAC,IAAA,GAAA7C,EAAA8C,gBAMA9C,EAAAY,GAAA,YAAA,SAAAC,GACA,GAAAC,GAAAd,EAAAe,sBAAAF,EAAAG,OAAAC,QAAA,mBACAjB,GAAA+C,YAAAC,MAAAC,OAAAnC,EAAA,OAAA,UAAA,KAQA,QAAA0B,GAAAH,GAGAa,GAGA,IAAAC,KAIAhE,GAAAmC,KAAA8B,EAAA,SAAA7B,EAAAC,GACA,GAAA6B,GAAA7B,EAAAE,UAAAR,MACA,KAAAS,EAAA,EAAAA,EAAA0B,EAAA1B,IACAH,EAAAE,UAAAC,GAAAC,mBAAAS,GACAc,EAAAG,KAAA9B,KAMA2B,EAAA1D,QAAAC,MAAAyD,GAAAxD,OAAA,WAAA,aAAAC,aAGAC,EAAAsD,GAIA,QAAAD,KACAlD,EAAAuD,IAAA,SACAvD,EAAAuD,IAAA,aACAvD,EAAAwD,YAAA,kBACAxD,EAAAyD,aAAA,gBAnKA,GAAAC,GAAA,GAAAC,MACAC,EAAAF,EAAAG,aAEA1E,GAAA,cAAA2E,KAAAF,EAEA,IAAAR,GACA5D,EAIAQ,EAAA,GAAA6B,UAAAkC,KACAC,UAAA,MACAhB,MAAA,yCACAN,oBAAA,YACAC,KAAA,IAMA3C,GAAAY,GAAA,OAAA,WACAZ,EAAAiE,WAAAC,UACAlE,EAAAmE,WAAA,GAAAtC,UAAAuC,YAEAjF,EAAAkF,QAAA,wBAAA,SAAA9E,GACA6D,EAAA7D,EACAD,EAAA8D,OA8IAjE,EAAA,aAAAiD,MAAA,WACAtC,QAAAC,IAAA,QACAmD,IACArD,EAAAL","file":"scripts-bundle.js","sourcesContent":["$(document).ready(function() {\n\n\t//custom scripting goes here\n\n\t// injecting current year into footer\n\t// DO NOT DELETE\n\n\tvar d = new Date();\n\tvar year = d.getFullYear();\n\n\t$('.copyright').text(year);\n\n\tvar rawData;\n\tvar forceData;\n\n\t// initial map setup\n\n\tvar map = new mapboxgl.Map({\n\t\tcontainer: \"map\",\n\t\tstyle: 'http://maps.dallasnews.com/styles.json',\n\t\tcenter: [-96.7870228, 32.8255772],\n\t\tzoom: 10\n\t});\n\n\n\t// disabling scroll zoom, adding zoom and navigation controls\n\t// getting the data and passing it along to be processed\n\tmap.on(\"load\", function() {\n\t\tmap.scrollZoom.disable();\n\t\tmap.addControl(new mapboxgl.Navigation());\n\n\t\t$.getJSON(\"js/map_data_2015.json\", function(data) {\n\t\t\trawData = data;\n\t\t\tprocessData(rawData);\n\t\t});\n\n\t});\n\n\t// turning our json into geojson using the geojson.js parser.\n\t// for more info: https://github.com/caseypt/geojson.js\n\t// once the data is parsed into geojson, we pass it on to drawMap\n\n\tfunction processData(data) {\n\t\tforceData = GeoJSON.parse(data, {Point: [\"latitude\", \"longitude\"], exclude: []});\n\t\tdrawMap(forceData);\n\t\tconsole.log(forceData);\n\t}\n\n\n\n\tfunction drawMap(data) {\n\t\t// adding the data as a source to the map\n\t\tmap.addSource(\"dpdForceData\", {\n\t\t\ttype: \"geojson\",\n\t\t\tdata: data\n\t\t});\n\n\t\t// adding a layer of circles tied to the data source added above\n\t\tmap.addLayer({\n\t\t\t\"id\": \"forceIncidents\",\n\t\t\t\"source\": \"dpdForceData\",\n\t\t\t\"type\": \"circle\",\n\t\t\t\"layout\": {\n\t\t\t\t\"visibility\": \"visible\"\n\t\t\t},\n\t\t\t\"paint\": {\n\t\t\t\t\"circle-radius\": {\n\t\t\t\t\tstops:[[8, 2], [11, 4], [15, 8]]\n\t\t\t\t},\n\t\t\t\t\"circle-color\": \"#950000\"\n\t\t\t}\n\t\t});\n\n\t\t// clicking on a feature on the map (i.e., a circle)\n\t\tmap.on(\"click\", function(e) {\n\t\t\tvar features = map.queryRenderedFeatures(e.point, {layers: [\"forceIncidents\"]});\n\n\t\t\tif (!features.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar feature = features[0];\n\n\t\t\t// grab the id of the feature we clicked on\n\t\t\tvar id = feature.properties.id;\n\n\t\t\t// set an empty content variable to hold the content of our popup\n\t\t\tvar content = \"\";\n\n\t\t\t// check through our data for an id that matches the one clicked on\n\t\t\t$.each(data.features, function(k,v) {\n\t\t\t\tif (v.properties.id === id) {\n\n\t\t\t\t\t// get the lengh of the number of incidents involved with that\n\t\t\t\t\t// feature. This corresponds to the number of officer involved\n\t\t\t\t\t// in a use of force incident at that particular date/time/location\n\t\t\t\t\tvar totalIncidents = v.properties.force_use.length;\n\n\t\t\t\t\t// cycle through each one of those officers, and add their badge\n\t\t\t\t\t// number to the content variable that will be displayed in the\n\t\t\t\t\t// popup\n\t\t\t\t\tfor (i = 0; i < totalIncidents; i++) {\n\t\t\t\t\t\tcontent += \"<span class='badge' data-badge='\"+ v.properties.force_use[i].current_badge_no +\"'>\" + v.properties.force_use[i].current_badge_no + \"</span>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// building out and placing the popup that contains the badge numbers\n\t\t\tvar popup = new mapboxgl.Popup()\n\t\t\t\t.setLngLat(feature.geometry.coordinates)\n\t\t\t\t.setHTML(content)\n\t\t\t\t.addTo(map);\n\n\t\t\t// clicking on a badge number filters the map to display only incidents\n\t\t\t// involving that particluar badge number (i.e., officer)\n\t\t\t$(\".badge\").click(function() {\n\t\t\t\tvar badge = $(this).attr(\"data-badge\");\n\t\t\t\tfilterBadge(badge);\n\t\t\t});\n\n\t\t\t// centering and zooming the map on that incident that was clicked on\n\t\t\tmap.flyTo({\n\t\t\t\tcenter: feature.geometry.coordinates,\n\t\t\t\tzoom: Math.max(14, map.getZoom())\n\t\t\t});\n\t\t});\n\n\n\t\t// setting the cursor to a pointer when hovering over a feature (i.e. circle)\n\t\tmap.on(\"mousemove\", function(e) {\n\t\t\tvar features = map.queryRenderedFeatures(e.point, {layers: [\"forceIncidents\"]});\n\t\t\tmap.getCanvas().style.cursor = (features.length) ? \"pointer\" : \"\";\n\t\t});\n\n\t}\n\n\t// function that filters the map based on badge number clicked\n\t// checks the passed badge number against the raw data\n\t// then builds a new array of the matching incidents\n\tfunction filterBadge(badge) {\n\n\t\t// clear the map of the current layers and sources\n\t\tclearMap();\n\n\t\t// placeholder variable for the resulting officer data`\n\t\tvar officerData = [];\n\n\t\t// iterate over the raw data and check for matching badge numbers\n\t\t// then push those incidents to the officerData array\n\t\t$.each(rawData, function(k,v) {\n\t\t\tvar totalOfficers = v.force_use.length;\n\t\t\tfor (i = 0; i < totalOfficers; i++) {\n\t\t\t\tif (v.force_use[i].current_badge_no === badge) {\n\t\t\t\t\tofficerData.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// parse the resulting officerData array as GeoJSON\n\t\tofficerData = GeoJSON.parse(officerData, {Point: [\"latitude\", \"longitude\"], exclude: []});\n\n\t\t// draw the map again with the new officer data\n\t\tdrawMap(officerData);\n\t}\n\n\t// clears the map of any layers, sources, click and mousemove functions\n\tfunction clearMap() {\n\t\tmap.off(\"click\");\n\t\tmap.off(\"mousemove\");\n\t\tmap.removeLayer(\"forceIncidents\");\n\t\tmap.removeSource(\"dpdForceData\");\n\t}\n\n\t// button that clears the map of any filter set, reseting the map to it's\n\t// initial state\n\t$(\".clearMap\").click(function() {\n\t\tconsole.log(\"test\");\n\t\tclearMap();\n\t\tdrawMap(forceData);\n\t});\n\n\n\n});\n"],"sourceRoot":"/source/"}